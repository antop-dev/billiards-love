plugins {
    id "org.springframework.boot" version "2.3.1.RELEASE"
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
    id "java"
    id "org.sonarqube" version "3.0"
    id "jacoco"
}

group = "org.antop"
version = "1.0.0"

project.sourceCompatibility = 1.8
project.targetCompatibility = 1.8

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-websocket"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "io.jsonwebtoken:jjwt:0.9.1"
    implementation "com.querydsl:querydsl-jpa"
    implementation "com.querydsl:querydsl-apt"
    compileOnly "org.projectlombok:lombok"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor "org.projectlombok:lombok"
    // https://docs.sentry.io/clients/java/integrations/#spring
    implementation "io.sentry:sentry-spring:1.7.30"
    // https://github.com/ulisesbocchio/jasypt-spring-boot/issues
    implementation "com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3"
    // https://github.com/candrews/log4jdbc-spring-boot-starter/
    implementation "com.integralblue:log4jdbc-spring-boot-starter:2.0.0"
    // https://mariadb.com/kb/en/about-mariadb-connector-j/
    implementation "org.mariadb.jdbc:mariadb-java-client:2.6.2"
    // https://commons.apache.org/proper/commons-io/
    implementation "commons-io:commons-io:2.8.0"
    // https://commons.apache.org/proper/commons-lang/
    implementation "org.apache.commons:commons-lang3:3.11"
    // https://github.com/google/gson
    implementation "com.google.code.gson:gson:2.8.6"
    // https://commons.apache.org/proper/commons-codec/
    implementation "commons-codec:commons-codec:1.15"
    // https://github.com/google/guava
    implementation "com.google.guava:guava:30.1-jre"
    // querydsl
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties["querydsl.version"]}:jpa"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응
    /**
     * https://github.com/ulisesbocchio/jasypt-spring-boot
     */
    implementation "com.github.ulisesbocchio:jasypt-spring-boot-starter:2.1.2"
    /**
     * test
     */
    // https://github.com/DiUS/java-faker
    testImplementation "com.github.javafaker:javafaker:1.0.2"
    // https://github.com/npathai/hamcrest-optional
    testImplementation "com.github.npathai:hamcrest-optional:2.0.0"
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "com.h2database:h2"
}

test {
    useJUnitPlatform()
    // 이 테스크가 끝난 다음 수행할 테스크
    finalizedBy "jacocoTestReport"
}

jacoco {
    toolVersion "0.8.5"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

sonarqube {
    properties {
        property "sonar.organization", "antop-dev-github"
        property "sonar.projectKey", "antop-dev_billiards-love:back-end"
        property "sonar.projectName", "billiards-love:back-end"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.java.source", "1.8"
        property "sonar.java.target", "1.8"
    }
}
